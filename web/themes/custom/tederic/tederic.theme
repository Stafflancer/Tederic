<?php

/**
 * @file
 * Functions to support theming in the Tederic custom theme.
 */

/**
 * Implements hook_preprocess_html().
 */
function tederic_preprocess_html(&$variables) {
  $language_id = \Drupal::languageManager()->getCurrentLanguage()->getId();

  $variables['language_id'] = $language_id;
  if ($language_id == 'zh-hans') {
    $variables['#attached']['library'][] = 'tederic/font-zh';
  } else {
    $variables['#attached']['library'][] = 'tederic/font-en';
  }
}

/**
 * Implements theme_preprocess_breadcrumb().
 */
function tederic_preprocess_breadcrumb(&$variables) {
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements template_preprocess_views_view_field().
 */
function tederic_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  if ($view->id() == 'products') {
    if ($variables['field']->field == 'field_series_sub_category') {
      if (empty($variables['row']->taxonomy_term_field_data_node__field_series_sub_category_tid)) {
        $variables['output'] = [
          '#markup' => '<h3>' . $variables['output'] . '</h3>'
        ];
      }
      else {
        $sub_category_tid = $variables['row']->taxonomy_term_field_data_node__field_series_sub_category_tid;
        $sub_category_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($sub_category_tid);
        $parent_category_tid = $sub_category_term->get('field_parent_category')->getValue()[0]['target_id'];
        $parent_category_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($parent_category_tid);
        $class = trim($parent_category_term->name->value);
        $class = strtolower($class);
        $class = str_replace(' ', '-', $class);
        $variables['output'] = [
          '#markup' => '<h3 class="pc-' . $class . '">' . $variables['output'] . '</h3>'
        ];
      }
    }
  }
  
  if ($view->id() == 'series_sub_categories') {
    if ($view->current_display == 'menu_left_block') {
      if ($variables['field']->field == 'name') {
        // Add parent category tid to variable.
        $sub_category_tid = $variables['row']->tid;
        $sub_category_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($sub_category_tid);
        $parent_category_tid = $sub_category_term->get('field_parent_category')->getValue()[0]['target_id'];
        $variables['parent_category_tid'] = $parent_category_tid;
        // Add separator.
        $variables['output'] = str_replace(' ', '&nbsp;<span>-</span>&nbsp;', $variables['output']);
      }
    }
  }
}

/**
 * Add dynamic blog post variables.
 */
function tederic_preprocess_paragraph(&$variables) {
  $paragraph_type = $variables['paragraph']->bundle();

  switch ($paragraph_type) {
    case 'product_animation_section':
      $paragraph = $variables['paragraph'];

      $data_html = $paragraph->get('field_machine_parts_data')->getValue()[0]['value'];

      $machine_parts = $paragraph->get('field_machine_parts')->getValue();
      if (!empty($machine_parts)) {
        $machine_parts_pid = [];
        foreach ($machine_parts as $value) {
          $machine_parts_pid[] = $value['target_id'];
        }

        // Parse html
        $dom = new DOMDocument();
        $dom->loadHTML($data_html);
        $links = $dom->getElementsByTagName('a');
        if (!empty($links)) {
          $parts_map_data = [];

          foreach($links as $key => $link) {
            $style = $link->getAttribute('style');
            $parts_map_data[] = [
              'pid' => $machine_parts_pid[$key],
              'style' => $style,
            ];
          }
          // Map dara array.
          $variables['parts_map_data'] = $parts_map_data;
          // Dialog options.
          $variables['dialog_options'] = \Drupal\Component\Serialization\Json::encode([
            'dialogClass' => 'machine-part',
          ]);
        }
      }
      break;
    case 'map_block':
      $locations = [];
      $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $map_locations = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(
        [
          'type' => 'map_location', 
          'status' => 1,
          'langcode' => $lang_code,
        ]
      );

      if (!empty($map_locations)) {
        foreach ($map_locations as $nid => $node) {
          // $node = $node->getTranslation($lang_code)->toArray();
          // Is headquarter
          $headquarter = empty($node->get('field_headquarter')->getValue()[0]['value']) ? FALSE : TRUE;
          // Is headquarter
          $big_icon = empty($node->get('field_big_icon')->getValue()[0]['value']) ? FALSE : TRUE;
          // Country
          $country = empty($node->get('field_country')->getValue()[0]['value']) ? '' : $node->get('field_country')->getValue()[0]['value'];
          // Position
          $x = $node->get('field_x')->getValue()[0]['value'];
          $y = $node->get('field_y')->getValue()[0]['value'];
          // Content
          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
          $build = $view_builder->view($node, 'teaser');
          $output = render($build);
          $location = [
            'x' => $x / 100,
            'y' => $y / 100,
            'note' => $output,
            'headquarter' => $headquarter,
            'big_icon' => $big_icon,
            'country' => $country
          ];

          $locations[] = $location;
        }
      }

      $variables['#attached']['library'][] = 'tederic/img-viewer2'; 
      $variables['#attached']['drupalSettings']['map_block']['locations'] = $locations;
      break;
  }
}
